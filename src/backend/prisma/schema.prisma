generator client {
  provider = "prisma-client-js"
  // remove custom output so you can keep: import { PrismaClient } from '@prisma/client'
}

datasource db {
  provider = "sqlite"
  url      = env("DB_URL")
}

model Plc {
  id        Int      @id @default(autoincrement())
  name      String
  ip        String
  port      Int      @default(102)
  rack      Int      @default(0)
  slot      Int      @default(1)
  type      String
  enabled   Boolean  @default(true)

  // ---- Diagnostics ----
  status      String   @default("unknown") // connected|disconnected|unknown
  lastError   String?
  lastErrorAt DateTime?
  errorCount  Int      @default(0)

  tags      Tag[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id        Int      @id @default(autoincrement())
  plcId     Int
  name      String

  // Siemens addressing (you can refactor later)
  area      String   // DB, PE, PA, MK, TM, CT
  dbNumber  Int?
  start     Int
   bitOffset Int?
  amount    Int
  dataType  String   // BOOL | INT | DINT | REAL | ...

   sortOrder Int      @default(0)

  polling   Boolean  @default(true)
  readOnly  Boolean  @default(false)

   // ---- SCALING FIELDS (NEW) ----
  rawMin    Float?  @default(0)  // e.g., 0.0
  rawMax    Float?  @default(100) // e.g., 27648.0
  engMin    Float?  @default(0) // e.g., 0.0
  engMax    Float?  @default(100) // e.g., 100.0

  // Optional: store scaling formula or unit for UI/display
  unit      String?  // e.g., "Â°C", "bar", "m/s"
  formula   String?  // e.g., "linear", if you later support non-linear

  // ---- Diagnostics ----
  quality   String?
  lastError String?

  lastValue String?
  updatedAt DateTime @updatedAt
  plc       Plc      @relation(fields: [plcId], references: [id])
}
